[{"id":"17c0458.613d9bb","type":"tab","label":"Cat Feeder","disabled":false,"info":""},{"id":"342a5da5.443ee2","type":"telegram command","z":"17c0458.613d9bb","name":"/photo","command":"/photo","bot":"691939b7.958468","strict":false,"hasresponse":true,"x":90,"y":120,"wires":[["2cc8e5ff.e4d63a"],[]]},{"id":"2cc8e5ff.e4d63a","type":"function","z":"17c0458.613d9bb","name":"","func":"//for example if command type by user is \"/photo sun\"\n//telegram command node of /photo will triggered\n//with additional text \" sun\" and then send to here\n//as msg.payload.content \n//find out lenght of msg.payload.conten\nvar n = msg.payload.content.length \n//remove the empty space before the sun, hence\n//now the topic is just \"sun\"\nvar topic = msg.payload.content.substring(1,n)\n//define a variable to use as caption of photo\nvar caption \n//define variable to store first name of user\nvar first_name = msg.originalMessage.from.first_name\n\n//check if the caption is empty, meaning user just\n//type \"/photo\" without topic\nif (topic === \"\") {\n    //here, no topic defined hence assuming \"random\".\n    //fill in caption to to inform users\n    topic = \"random\"\n    caption = \"Hi \" + first_name + \", \"\n    caption = caption + \"there is no topic defined in your request, hence assuming random photo.\\n\"\n    caption = caption + \"To see photo of a topic such as earth, type /photo earth\"\n}\nelse {\n    //here there is a topic\n    caption = \"Hi \" + first_name + \", \" + \"this is photo of '\" + topic + \"'.\"\n}\n\n//define a variable namely url, consisit of https link\n//of unsplash photo API with a topic we want\nvar url = \"https://source.unsplash.com/1920x1080/?\" + topic\n\n//define a output variable object with 3 attributes\n//define chatId that we need to reply to which same as he chatId \n//received, i.e., msg.payload.chatId\n//define a caption as we constrcuted above\n//define a url as constrcutre above, needed by next htt request node\nvar msg1 = {\n    chatId: msg.payload.chatId,\n    caption : caption,\n    url: url\n}\n//return msg1 to next node, which is http request nodes\nreturn msg1","outputs":1,"noerr":0,"initialize":"","finalize":"","x":340,"y":120,"wires":[["ec69dbe9.2a75b8"]]},{"id":"ec69dbe9.2a75b8","type":"http request","z":"17c0458.613d9bb","name":"","method":"GET","ret":"bin","paytoqs":"body","url":"","tls":"","persist":false,"proxy":"","authType":"","x":510,"y":120,"wires":[["dac4da34.f043b8"]]},{"id":"dac4da34.f043b8","type":"function","z":"17c0458.613d9bb","name":"","func":"//define a variable for output payload\n//define chatId that photo to send to\n//same chatId received request of photo\n//define type of telegram message to be sent\n//which is message\n//define content of message, which is binary buffer\n//from the output (msg.payload) of previous node\n//the http request\n//define caption of photo that constructed before,\nvar payload = {\n    chatId: msg.chatId,\n    type: \"photo\",\n    content: msg.payload,\n    caption: msg.caption\n}\n\n//define a new output with payload\nvar msg1 = {payload: payload}\n//return msg1 to telegram sender\nreturn msg1\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":680,"y":120,"wires":[["b7918502.c1ade8"]]},{"id":"b7918502.c1ade8","type":"telegram sender","z":"17c0458.613d9bb","name":"","bot":"691939b7.958468","x":1310,"y":240,"wires":[["a9fc36a7.1c8278"]]},{"id":"22a2aea0.cceba2","type":"comment","z":"17c0458.613d9bb","name":"About msg of node red for Telegrambot","info":"In node-red, all block must have a input JSON by namely msg object, as well as an return output JSON object with default name is msg (but can be change).\n\nFor example, the output of telegrambot command/receiver block is JSON object namely msg, it consists of payload and many other key. \n\nmsg = {\n    payload: value_payload,\n    other1: value_1,\n    other2: value_2,\n    ...\n    ...\n}\n\nThe msg.payload, can be a single number, an array or in the case of telegrambot it is another JSON object consist of several other important value, i.e.,\nmsg = {\n    payload: {\n        chatId: 11111111, //id of a human user or group that bot chat with\n        type: \"message\", //coudl be \"message\", \"photo\", \"video\"\n        content: \"text message\", //text received by block\n        caption: \"title\", //this is optional, only applicable for video or photo type\n    },\n    other1: value_1,\n    other2: value_2,\n    ...\n    ...\n}\nTo see details, put a debug block to telegrambot command block\n\nSimilar to input JSON object, a function block received JSON object from command or receiver block may have a return msg too but we can change the name, such as msg1 with following codes\n\nvar msg1 = {\n    payload = {\n        chatId: msg.payload.chatId, //reply to the user that sent message to bot\n        type: \"message\", //reply a message\n        content: msg.payload.content + \" \" msg.payload.content, //duplicate what received and send back\n    }\n}\nreturn msg1\n\nDon't forget to connect this fuction block to a telegrambot sender block so that it reoly to user.\n\n\n","x":190,"y":60,"wires":[]},{"id":"da01058c.079508","type":"telegram command","z":"17c0458.613d9bb","name":"/help","command":"/help","bot":"691939b7.958468","strict":false,"hasresponse":true,"x":90,"y":240,"wires":[["bc885105.b3923","552577.460cea88"],[]]},{"id":"bc885105.b3923","type":"function","z":"17c0458.613d9bb","name":"","func":"var caption = global.get(\"helptext\");\n\nvar payload = {\n    chatId: msg.payload.chatId,\n    type: \"message\",\n    caption: caption,\n    content: caption\n}\n\nvar msg1 = {payload: payload}\n\nreturn msg1\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":680,"y":220,"wires":[["b7918502.c1ade8"]]},{"id":"97c1d393.01fb9","type":"telegram command","z":"17c0458.613d9bb","name":"/wetfeed","command":"/wetfeed","bot":"691939b7.958468","strict":false,"hasresponse":true,"x":100,"y":320,"wires":[["46954a5e.fd7de4","4398515b.3a221","32d3198b.109526"],[]]},{"id":"46954a5e.fd7de4","type":"function","z":"17c0458.613d9bb","name":"Format Response","func":"var n = msg.payload.content.length \nvar cans = Number(msg.payload.content.substring(1,n))\n\nvar caption \n\nvar first_name = msg.originalMessage.from.first_name\n\nif (cans === 0) {\n    // No value for n cans specified\n    caption = \"Hi \" + first_name + \", dispensing 1 can now for Max.\"\n}\nelse {\n    caption = \"Hi \" + first_name + \", dispensing \" + cans + \" cans now for the cats.\" \n}\n\n\nvar payload = {\n    chatId: msg.payload.chatId,\n    type: \"message\",\n    content: caption,\n    caption: caption\n}\n\n//var msg1 = {\n//    chatId: msg.payload.chatId,\n//    caption : caption\n//}\n\nvar msg1 = {payload: payload}\n\nreturn msg1","outputs":1,"noerr":0,"initialize":"","finalize":"","x":370,"y":320,"wires":[["b7918502.c1ade8"]]},{"id":"7e722e37.ffef8","type":"telegram command","z":"17c0458.613d9bb","name":"/dryfeed","command":"/dryfeed","bot":"691939b7.958468","strict":false,"hasresponse":true,"x":100,"y":560,"wires":[["4d7cb0db.1b315","4398515b.3a221","1359d3a7.125b1c","d9e2c466.6c23f8"],[]]},{"id":"4d7cb0db.1b315","type":"function","z":"17c0458.613d9bb","name":"Format Response","func":"var n = msg.payload.content.length \nvar cans = Number(msg.payload.content.substring(1,n))\n\nvar caption \n\nvar first_name = msg.originalMessage.from.first_name\n\nif (cans === 0) {\n    // No value for n cans specified\n    caption = \"Hi \" + first_name + \", dispensing dry food now for Max.\"\n}\nelse {\n    caption = \"Hi \" + first_name + \", dispensing \" + cans + \" cans now for the cats.\" \n}\n\n\nvar payload = {\n    chatId: msg.payload.chatId,\n    type: \"message\",\n    content: caption,\n    caption: caption\n}\n\n//var msg1 = {\n//    chatId: msg.payload.chatId,\n//    caption : caption\n//}\n\nvar msg1 = {payload: payload}\n\nreturn msg1","outputs":1,"noerr":0,"initialize":"","finalize":"","x":370,"y":560,"wires":[["b7918502.c1ade8"]]},{"id":"904dbf0a.7c47","type":"telegram command","z":"17c0458.613d9bb","name":"/video","command":"/video","bot":"691939b7.958468","strict":false,"hasresponse":true,"x":90,"y":680,"wires":[["4398515b.3a221"],[]]},{"id":"b09258fc.5426d8","type":"function","z":"17c0458.613d9bb","name":"","func":"var caption \n\ncaption = \"Here's your video!\"\n\nvar payload = {\n    chatId: msg.chatId,\n    type: \"video\",\n    content: msg.payload,\n    caption: caption\n}\n\n//var msg1 = {\n//    chatId: msg.payload.chatId,\n//    caption : caption\n//}\n\nvar msg1 = {payload: payload}\n\nreturn msg1","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1140,"y":680,"wires":[["b7918502.c1ade8"]]},{"id":"a9fc36a7.1c8278","type":"debug","z":"17c0458.613d9bb","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1540,"y":240,"wires":[]},{"id":"ce90d779.566188","type":"file in","z":"17c0458.613d9bb","name":"Video File","filename":"","format":"","chunk":false,"sendError":false,"encoding":"none","x":980,"y":680,"wires":[["b09258fc.5426d8"]]},{"id":"3229c669.ed1b6a","type":"exec","z":"17c0458.613d9bb","command":"ffmpeg -f v4l2 -r 25 -s 640x480 -t 5 -i /dev/video0 -vf 'drawtext=text=:x=10:y=H-th-10:fontsize=12:fontcolor=white' ","addpay":true,"append":"","useSpawn":"false","timer":"","oldrc":false,"name":"Capture Video","x":580,"y":680,"wires":[["61f72652.d4cb68"],[],[]],"outputLabels":["msg.filename","",""]},{"id":"4398515b.3a221","type":"function","z":"17c0458.613d9bb","name":"Create Filename","func":"function Right(str, n){\n    if (n <= 0)\n       return \"\";\n    else if (n > String(str).length)\n       return str;\n    else {\n       var iLen = String(str).length;\n       return String(str).substring(iLen, iLen - n);\n    }\n}\n\nvar fname = \"/home/pi/videos/cat_video_\" \nvar currentDate = new Date();\nvar cDay = \"0\" + currentDate.getDate().toString()\nvar cMonth = \"0\" + (currentDate.getMonth() + 1).toString()\nvar cYear = currentDate.getFullYear().toString()\nvar cHour = \"0\" + currentDate.getHours().toString()\nvar cMinutes = \"0\" + currentDate.getMinutes().toString()\n\n//var DTG = cYear.toString() + cMonth.toString() + cDay.toString()\nvar DTG = cYear + Right(cMonth,2) + Right(cDay,2)  + Right(cHour,2) + Right(cMinutes,2) + \".avi\"\n\nfname = fname + DTG\nvar msg1 = {\n    chatId: msg.payload.chatId,\n    filename: fname,\n    payload: fname\n}\n\ncontext.set(\"Filname\",fname);\n\n//return msg1 to next node, which is http request nodes\nreturn msg1","outputs":1,"noerr":0,"initialize":"","finalize":"","x":370,"y":680,"wires":[["3229c669.ed1b6a"]]},{"id":"61f72652.d4cb68","type":"change","z":"17c0458.613d9bb","name":"","rules":[{"t":"set","p":"Filename","pt":"msg","to":"$globalContext(\"Filename\")","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":790,"y":680,"wires":[["ce90d779.566188"]]},{"id":"32d3198b.109526","type":"mqtt out","z":"17c0458.613d9bb","name":"MQTT Wetfeed","topic":"wetfeed","qos":"","retain":"","broker":"bcb2820f.2488b","x":360,"y":380,"wires":[]},{"id":"1359d3a7.125b1c","type":"mqtt out","z":"17c0458.613d9bb","name":"MQTT Dryfeed","topic":"dryfeed","qos":"","retain":"","broker":"bcb2820f.2488b","x":360,"y":620,"wires":[]},{"id":"4e836157.f6696","type":"telegram command","z":"17c0458.613d9bb","name":"/wetfeed2","command":"/wetfeed2","bot":"691939b7.958468","strict":false,"hasresponse":true,"x":100,"y":440,"wires":[["139b6c9a.7df4a3","c5852131.747fc","4398515b.3a221"],[]]},{"id":"139b6c9a.7df4a3","type":"function","z":"17c0458.613d9bb","name":"Format Response","func":"var n = msg.payload.content.length \nvar cans = Number(msg.payload.content.substring(1,n))\n\nvar caption \n\nvar first_name = msg.originalMessage.from.first_name\n\nif (cans === 0) {\n    // No value for n cans specified\n    caption = \"Hi \" + first_name + \", dispensing 2 cans now for Max and Clawdia.\"\n}\nelse {\n    caption = \"Hi \" + first_name + \", dispensing \" + cans + \" cans now for the cats.\" \n}\n\n\nvar payload = {\n    chatId: msg.payload.chatId,\n    type: \"message\",\n    content: caption,\n    caption: caption\n}\n\n//var msg1 = {\n//    chatId: msg.payload.chatId,\n//    caption : caption\n//}\n\nvar msg1 = {payload: payload}\n\nreturn msg1","outputs":1,"noerr":0,"initialize":"","finalize":"","x":370,"y":440,"wires":[["b7918502.c1ade8"]]},{"id":"c5852131.747fc","type":"mqtt out","z":"17c0458.613d9bb","name":"MQTT Wetfeed 2","topic":"wetfeed2","qos":"","retain":"","broker":"bcb2820f.2488b","x":370,"y":500,"wires":[]},{"id":"c003677e.b131c8","type":"mqtt out","z":"17c0458.613d9bb","name":"Catfeed Motor Test","topic":"catfeed/motor","qos":"0","retain":"","broker":"bcb2820f.2488b","x":850,"y":600,"wires":[]},{"id":"d9e2c466.6c23f8","type":"function","z":"17c0458.613d9bb","name":"Format message for MQTT","func":"var msg1 = {payload: \"fwd\", topic: \"catfeed/motor\"}\n\nreturn msg1","outputs":1,"noerr":0,"initialize":"","finalize":"","x":600,"y":600,"wires":[["c003677e.b131c8"]]},{"id":"552577.460cea88","type":"file in","z":"17c0458.613d9bb","name":"Read Help Text File","filename":"/home/pi/catfeeder/help.txt","format":"utf8","chunk":false,"sendError":false,"encoding":"none","x":310,"y":180,"wires":[["f09ee597.d90c18"]],"outputLabels":["textfile"]},{"id":"f09ee597.d90c18","type":"function","z":"17c0458.613d9bb","name":"","func":"var caption \n\ncaption = msg.payload\n\nglobal.set(\"helptext\",caption);","outputs":1,"noerr":0,"initialize":"","finalize":"","x":500,"y":180,"wires":[["bc885105.b3923"]]},{"id":"691939b7.958468","type":"telegram bot","z":"","botname":"@MaxFeederbot","usernames":"","chatids":"","baseapiurl":"","updatemode":"polling","pollinterval":"100","usesocks":false,"sockshost":"","socksport":"6667","socksusername":"anonymous","sockspassword":"","bothost":"","localbotport":"8443","publicbotport":"8443","privatekey":"","certificate":"","useselfsignedcertificate":false,"sslterminated":false,"verboselogging":false},{"id":"bcb2820f.2488b","type":"mqtt-broker","z":"","name":"MQTT_test","broker":"localhost","port":"1883","clientid":"","usetls":false,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""}]